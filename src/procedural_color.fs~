// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  //color = vec3(1,1,1);
  
  vec3 ka, kd, ks;

  if (is_moon) {
  	  ka = vec3(0.2, 0.2, 0.2);
	  kd = vec3(0.5, 0.5, 0.5);
	  ks = vec3(0.5, 0.5, 0.5);
  } else {
  	  ka = vec3(0.1, 0.1, 0.25);
	  kd = vec3(0.05, 0.25, 0.9);
	  ks = vec3(0.8, 0.8, 0.8);
  }
  float p = 500;

  float theta = animation_seconds * M_PI / 2;
  mat4 rotation = mat4(
  cos(theta), 0, sin(theta), 0,
	0, 1, 0, 0,
	-sin(theta), 0, cos(theta), 0,
	0, 0, 0, 1);
  vec3 v = normalize(view_pos_fs_in.xyz);
  vec3 l = normalize((view * rotation * vec4(1, 1, 0, 0)).xyz);
  
  float noise = perlin_noise(sphere_fs_in);
  noise = abs(sin(noise*M_PI));
  kd = kd * pow(noise,2) + kd * noise;

  color = blinn_phong(ka, kd, ks, p, normal_fs_in, v, l);
  
  /////////////////////////////////////////////////////////////////////////////
}
